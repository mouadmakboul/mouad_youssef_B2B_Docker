spring.application.name=demo
server.port=8080
#5050 port postgresql

# PostgreSQL configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/B2Btwo
spring.datasource.username=postgres
spring.datasource.password=jaimeislam10
#spring.datasource.url=jdbc:postgresql://postgres-sql:5432/mouad-demo
#spring.datasource.username=username
#spring.datasource.password=password
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=true
#cette ligne neccaisaire poue executer le scema.sql
spring.sql.init.mode=always


# Additional properties for PostgreSQL
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false

#ForopenIA
openai.key=sk-proj-FEvaPoxAwG6Q12a74hwZT3BlbkFJoFdelqOxU2lp5Sf2d92r



#i18N
spring.messages.basename=i18n/messages

#Metrics
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
#http://192.168.142.1:3000/dashboard/new?orgId=1&editPanel=1   lien pour grafana
#http://192.168.142.1:9090/graph?g0.expr=go_memstats_heap_alloc_bytes&g0.tab=0&g0.display_mode=lines&g0.show_exemplars=0&g0.range_input=1h    lien pour prometheus
#docker run -d --name=grafana88 -p 3000:3000 grafana/grafana    demarrer grafana
#docker run -p 9090:9090 -v C:\Users\Mouad\Downloads\B2BTWO\demo\src\main\resources\prometheus.yml prom/prometheus   demarrer prometheus
#docker pull grafana/grafana        obtenir grafana
# docker pull prom/prometheus        obtenir prometheus
#http://localhost:2000/actuator/prometheus        pour actuator
#http://localhost:2000/swagger-ui/index.html#/entreprise-controller/getEntrepriseById      lien pour swagger
